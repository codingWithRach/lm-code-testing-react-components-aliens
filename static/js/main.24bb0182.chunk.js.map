{"version":3,"sources":["ContextProviders/ErrorMessageContext.tsx","ContextProviders/FormDataContext.tsx","data/FormData.ts","components/W12MHeader/W12MHeader.tsx","components/Label/Label.tsx","components/TextInput/TextInput.tsx","components/TableRowInput/TableRowInput.tsx","components/Select/Select.tsx","components/TableRowSelect/TableRowSelect.tsx","components/Textarea/Textarea.tsx","components/TableRowTextArea/TableRowTextarea.tsx","components/SubmitButton/SubmitButton.tsx","components/TableRowSubmitButton/TableRowSubmitButton.tsx","components/ErrorMessage/ErrorMessage.tsx","components/TableRowErrorMessage/TableRowErrorMessage.tsx","validation.tsx","components/W12MForm/W12MForm.tsx","components/EnteredData/EnteredData.tsx","components/FormLayout/FormLayout.tsx","components/Layout/Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultError","speciesError","planetError","beingsError","twoPlusTwoError","reasonError","ErrorMessageContext","React","createContext","defaultFunction","errorMessages","ErrorMessageUpdateContext","ErrorMessageProvider","children","useState","setErrorMessages","Provider","value","message","defaultFormData","speciesName","planetName","numberOfBeings","twoPlusTwo","reasonForSparing","submitted","FormDataContext","formData","FormDataUpdateContext","useFormData","useContext","FormDataProvider","setFormData","newFormData","W12MHeader","Label","forID","labelText","className","htmlFor","TextInput","id","onChangeHandler","type","onChange","TableRowInput","Select","values","map","index","TableRowSelect","TextArea","name","rows","cols","TableRowTextarea","valign","Textarea","SubmitButton","TableRowSubmitButton","colSpan","align","ErrorMessage","TableRowErrorMessage","errorMessage","allFieldsValid","Object","filter","length","validSpeciesName","species","validField","validPlanetName","planet","fieldValue","minLength","maxLength","regex","fieldName","contentMessage","validLength","validContent","validNumberOfBeings","validTwoPlusTwo","whatIsTwoPlusTwo","validReasonForSparing","test","W12MForm","updateFormData","twoPlusTwoOptions","setWhatIsTwoPlusTwo","updateErrorMessages","updateField","newValue","onSubmit","event","preventDefault","validForm","target","parseInt","EnteredData","FormLayout","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24bb0182.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\r\n\r\nexport interface IErrorMessageContext {\r\n  speciesError: string;\r\n  planetError: string;\r\n  beingsError: string;\r\n  twoPlusTwoError: string;\r\n  reasonError: string;\r\n}\r\n\r\nconst defaultError = {\r\n  speciesError: \"\",\r\n  planetError: \"\",\r\n  beingsError: \"\",\r\n  twoPlusTwoError: \"\",\r\n  reasonError: \"\",\r\n};\r\n\r\nconst ErrorMessageContext =\r\n  React.createContext<IErrorMessageContext>(defaultError);\r\n\r\nconst defaultFunction = (errorMessages: IErrorMessageContext) => {};\r\nconst ErrorMessageUpdateContext =\r\n  React.createContext<(errorMessages: IErrorMessageContext) => void>(\r\n    defaultFunction\r\n  );\r\n\r\nexport function useErrorMessage(): IErrorMessageContext {\r\n  return useContext(ErrorMessageContext);\r\n}\r\n\r\nexport function useErrorMessageUpdate(): typeof defaultFunction {\r\n  return useContext(ErrorMessageUpdateContext);\r\n}\r\n\r\nconst ErrorMessageProvider: React.FC<React.ReactNode> = ({ children }) => {\r\n  const [errorMessages, setErrorMessages] =\r\n    useState<IErrorMessageContext>(defaultError);\r\n\r\n  function updateErrorMessages(message: IErrorMessageContext) {\r\n    setErrorMessages({\r\n      speciesError: message.speciesError,\r\n      planetError: message.planetError,\r\n      beingsError: message.beingsError,\r\n      twoPlusTwoError: message.twoPlusTwoError,\r\n      reasonError: message.reasonError,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <ErrorMessageContext.Provider value={errorMessages}>\r\n      <ErrorMessageUpdateContext.Provider value={updateErrorMessages}>\r\n        {children}\r\n      </ErrorMessageUpdateContext.Provider>\r\n    </ErrorMessageContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ErrorMessageProvider;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { FormData, getDefaultFormData } from \"../data/FormData\";\r\n\r\nconst defaultFormData = getDefaultFormData();\r\nconst FormDataContext = React.createContext<FormData>(defaultFormData);\r\nconst defaultFunction = (formData: FormData) => {};\r\nconst FormDataUpdateContext =\r\n  React.createContext<(formData: FormData) => void>(defaultFunction);\r\n\r\nexport function useFormData(): FormData {\r\n  return useContext(FormDataContext);\r\n}\r\n\r\nexport function useFormDataUpdate(): typeof defaultFunction {\r\n  return useContext(FormDataUpdateContext);\r\n}\r\n\r\ntype Props = {\r\n  children?: React.ReactNode;\r\n};\r\nconst FormDataProvider: React.FC<Props> = ({ children }) => {\r\n  const [formData, setFormData] = useState<FormData>(defaultFormData);\r\n\r\n  function updateFormData(newFormData: FormData) {\r\n    setFormData(newFormData);\r\n  }\r\n\r\n  return (\r\n    <FormDataContext.Provider value={formData}>\r\n      <FormDataUpdateContext.Provider value={updateFormData}>\r\n        {children}\r\n      </FormDataUpdateContext.Provider>\r\n    </FormDataContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FormDataProvider;\r\n","export interface FormData {\r\n  speciesName: string;\r\n  planetName: string;\r\n  numberOfBeings: string;\r\n  twoPlusTwo: string;\r\n  reasonForSparing: string;\r\n  submitted: boolean;\r\n  [index: string]: any;\r\n}\r\n\r\nexport function getDefaultFormData(): FormData {\r\n  return {\r\n    speciesName: \"\",\r\n    planetName: \"\",\r\n    numberOfBeings: \"\",\r\n    twoPlusTwo: \"Not 4\",\r\n    reasonForSparing: \"\",\r\n    submitted: false,\r\n  };\r\n}\r\n","const W12MHeader = () => (\r\n\t<ul>\r\n\t\t<li>Each species may only submit ONE W-12-M form.</li>\r\n\t\t<li>\r\n\t\t\tAny mistakes will guarantee rejection and your planet will NOT be\r\n\t\t\tspared.\r\n\t\t</li>\r\n\t</ul>\r\n);\r\n\r\nexport default W12MHeader;\r\n","interface LabelProps {\r\n  forID: string;\r\n  labelText: string;\r\n}\r\n\r\nconst Label: React.FC<LabelProps> = ({ forID, labelText }) => (\r\n  <label className=\"form__text\" htmlFor={forID}>\r\n    {labelText}\r\n  </label>\r\n);\r\n\r\nexport default Label;\r\n","interface TextInputProps {\r\n  id: string;\r\n  value: string;\r\n  onChangeHandler: React.ChangeEventHandler<HTMLInputElement>;\r\n}\r\n\r\nconst TextInput: React.FC<TextInputProps> = ({\r\n  id,\r\n  value,\r\n  onChangeHandler,\r\n}) => {\r\n  return (\r\n    <>\r\n      <input type=\"text\" id={id} value={value} onChange={onChangeHandler} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import Label from \"../Label/Label\";\r\nimport TextInput from \"../TextInput/TextInput\";\r\n\r\ninterface TableRowProps {\r\n  id: string;\r\n  labelText: string;\r\n  value: string;\r\n  onChangeHandler: React.ChangeEventHandler<HTMLInputElement>;\r\n}\r\n\r\nconst TableRowInput: React.FC<TableRowProps> = ({\r\n  id,\r\n  labelText,\r\n  value,\r\n  onChangeHandler,\r\n}) => {\r\n  return (\r\n    <>\r\n      <tr>\r\n        <td>\r\n          <Label forID={id} labelText={labelText} />\r\n        </td>\r\n        <td>\r\n          <TextInput id={id} value={value} onChangeHandler={onChangeHandler} />\r\n        </td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableRowInput;\r\n","interface SelectProps {\r\n  id: string;\r\n  values: Array<string>;\r\n  onChangeHandler: React.ChangeEventHandler<HTMLSelectElement>;\r\n}\r\n\r\nconst Select: React.FC<SelectProps> = ({ id, values, onChangeHandler }) => {\r\n  return (\r\n    <>\r\n      <select id={id} onChange={onChangeHandler}>\r\n        {values.map((value, index) => (\r\n          <option key={index} value={index}>\r\n            {value}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import Label from \"../Label/Label\";\r\nimport Select from \"../Select/Select\";\r\n\r\ninterface TableRowProps {\r\n  id: string;\r\n  labelText: string;\r\n  values: Array<string>;\r\n  onChangeHandler: React.ChangeEventHandler<HTMLSelectElement>;\r\n}\r\n\r\nconst TableRowSelect: React.FC<TableRowProps> = ({\r\n  id,\r\n  labelText,\r\n  values,\r\n  onChangeHandler,\r\n}) => {\r\n  return (\r\n    <>\r\n      <tr>\r\n        <td>\r\n          <Label forID={id} labelText={labelText} />\r\n        </td>\r\n        <td>\r\n          <Select id={id} values={values} onChangeHandler={onChangeHandler} />\r\n        </td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableRowSelect;\r\n","interface TextAreaProps {\r\n  id: string;\r\n  name: string;\r\n  value: string;\r\n  onChangeHandler: React.ChangeEventHandler<HTMLTextAreaElement>;\r\n}\r\n\r\nconst TextArea: React.FC<TextAreaProps> = ({\r\n  id,\r\n  name,\r\n  value,\r\n  onChangeHandler,\r\n}) => {\r\n  return (\r\n    <>\r\n      <textarea\r\n        id={id}\r\n        name={name}\r\n        value={value}\r\n        rows={4}\r\n        cols={50}\r\n        onChange={onChangeHandler}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextArea;\r\n","import Label from \"../Label/Label\";\r\nimport Textarea from \"../Textarea/Textarea\";\r\n\r\ninterface TableRowProps {\r\n  id: string;\r\n  labelText: string;\r\n  value: string;\r\n  onChangeHandler: React.ChangeEventHandler<HTMLTextAreaElement>;\r\n}\r\n\r\nconst TableRowTextarea: React.FC<TableRowProps> = ({\r\n  id,\r\n  labelText,\r\n  value,\r\n  onChangeHandler,\r\n}) => {\r\n  return (\r\n    <>\r\n      <tr>\r\n        <td valign=\"baseline\">\r\n          <Label forID={id} labelText={labelText} />\r\n        </td>\r\n        <td>\r\n          <Textarea\r\n            id={id}\r\n            name={id}\r\n            value={value}\r\n            onChangeHandler={onChangeHandler}\r\n          />\r\n        </td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableRowTextarea;\r\n","interface SubmitButtonProps {\r\n  labelText: string;\r\n}\r\n\r\nconst SubmitButton: React.FC<SubmitButtonProps> = ({ labelText }) => (\r\n  <button type=\"submit\">{labelText}</button>\r\n);\r\n\r\nexport default SubmitButton;\r\n","import SubmitButton from \"../SubmitButton/SubmitButton\";\r\n\r\ninterface TableRowProps {\r\n  labelText: string;\r\n}\r\n\r\nconst TableRowSubmitButton: React.FC<TableRowProps> = ({ labelText }) => {\r\n  return (\r\n    <>\r\n      <tr>\r\n        <td colSpan={2} align=\"center\">\r\n          <SubmitButton labelText={labelText} />\r\n        </td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableRowSubmitButton;\r\n","import Label from \"../Label/Label\";\r\n\r\ninterface ErrorMessageProps {\r\n  message: string;\r\n}\r\n\r\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ message }) => (\r\n  <>\r\n    <Label forID=\"errorMessage\" labelText={message} />\r\n  </>\r\n);\r\n\r\nexport default ErrorMessage;\r\n","import ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\n\r\ninterface TableRowProps {\r\n  errorMessage: string;\r\n}\r\n\r\nconst TableRowErrorMessage: React.FC<TableRowProps> = ({ errorMessage }) => {\r\n  return (\r\n    <>\r\n      <tr className=\"errorText\">\r\n        <td />\r\n        <td>\r\n          <ErrorMessage message={errorMessage} />\r\n        </td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableRowErrorMessage;\r\n","import { FormData } from \"./data/FormData\";\r\nimport { IErrorMessageContext } from \"./ContextProviders/ErrorMessageContext\";\r\n\r\nexport const validForm = (\r\n  formData: FormData,\r\n  updateErrorMessages: (errorMessages: IErrorMessageContext) => void\r\n): boolean => {\r\n  const errorMessages: IErrorMessageContext = {\r\n    speciesError: validSpeciesName(formData.speciesName),\r\n    planetError: validPlanetName(formData.planetName),\r\n    beingsError: validNumberOfBeings(formData.numberOfBeings),\r\n    twoPlusTwoError: validTwoPlusTwo(formData.twoPlusTwo),\r\n    reasonError: validReasonForSparing(formData.reasonForSparing),\r\n  };\r\n  updateErrorMessages(errorMessages);\r\n  return allFieldsValid(errorMessages);\r\n};\r\n\r\nconst allFieldsValid = (errorMessages: IErrorMessageContext): boolean => {\r\n  return (\r\n    Object.values(errorMessages).filter((message) => message.length > 0)\r\n      .length === 0\r\n  );\r\n};\r\n\r\nconst validSpeciesName = (species: string): string =>\r\n  validField(species, 3, 23, /^[a-zA-Z]*$/, \"Species Name\", \"letters\");\r\n\r\nconst validPlanetName = (planet: string): string =>\r\n  validField(\r\n    planet,\r\n    2,\r\n    49,\r\n    /^[a-zA-Z0-9]*$/,\r\n    \"Planet Name\",\r\n    \"letters and numbers\"\r\n  );\r\n\r\nconst validField = (\r\n  fieldValue: string,\r\n  minLength: number,\r\n  maxLength: number,\r\n  regex: RegExp,\r\n  fieldName: string,\r\n  contentMessage: string\r\n): string => {\r\n  return (\r\n    validLength(fieldValue, minLength, maxLength, fieldName) ||\r\n    validContent(\r\n      fieldValue,\r\n      regex,\r\n      `${fieldName} can only contain ${contentMessage}`\r\n    )\r\n  );\r\n};\r\n\r\nconst validNumberOfBeings = (numberOfBeings: string): string => {\r\n  return validContent(\r\n    numberOfBeings,\r\n    /^[0-9]{10,}$/,\r\n    \"Number of Beings must be a number no less than 1,000,000,000\"\r\n  );\r\n};\r\n\r\nconst validTwoPlusTwo = (whatIsTwoPlusTwo: string): string => {\r\n  return validContent(whatIsTwoPlusTwo, /^4$/, \"2 + 2 must equal 4\");\r\n};\r\n\r\nconst validReasonForSparing = (reasonForSparing: string): string => {\r\n  return validLength(reasonForSparing, 17, 153, \"Reason for sparing\");\r\n};\r\n\r\nconst validLength = (\r\n  fieldValue: string,\r\n  minLength: number,\r\n  maxLength: number,\r\n  fieldName: string\r\n): string => {\r\n  let errorMessage = \"\";\r\n  if (fieldValue.length < minLength || fieldValue.length > maxLength) {\r\n    errorMessage = `${fieldName} must be between ${minLength} and ${maxLength} characters`;\r\n  }\r\n  return errorMessage;\r\n};\r\n\r\nconst validContent = (\r\n  fieldValue: string,\r\n  regex: RegExp,\r\n  message: string\r\n): string => {\r\n  let errorMessage = \"\";\r\n  if (regex.test(fieldValue) === false) {\r\n    errorMessage = message;\r\n  }\r\n  return errorMessage;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport W12MHeader from \"../W12MHeader/W12MHeader\";\r\nimport TableRowInput from \"../TableRowInput/TableRowInput\";\r\nimport TableRowSelect from \"../TableRowSelect/TableRowSelect\";\r\nimport TableRowTextArea from \"../TableRowTextArea/TableRowTextarea\";\r\nimport TableRowSubmitButton from \"../TableRowSubmitButton/TableRowSubmitButton\";\r\nimport { FormData } from \"../../data/FormData\";\r\nimport {\r\n  useErrorMessage,\r\n  useErrorMessageUpdate,\r\n  IErrorMessageContext,\r\n} from \"../../ContextProviders/ErrorMessageContext\";\r\nimport TableRowErrorMessage from \"../TableRowErrorMessage/TableRowErrorMessage\";\r\nimport { validForm } from \"../../validation\";\r\nimport {\r\n  useFormData,\r\n  useFormDataUpdate,\r\n} from \"../../ContextProviders/FormDataContext\";\r\n\r\nconst W12MForm: React.FC = () => {\r\n  const formData = useFormData();\r\n  const updateFormData = useFormDataUpdate();\r\n  const twoPlusTwoOptions = [\"Not 4\", \"4\"];\r\n  const [whatIsTwoPlusTwo, setWhatIsTwoPlusTwo] = useState<string>(\r\n    formData.twoPlusTwo\r\n  );\r\n  const errorMessages: IErrorMessageContext = useErrorMessage();\r\n  const updateErrorMessages = useErrorMessageUpdate();\r\n\r\n  const saveApplication = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const newFormData: FormData = {\r\n      ...formData,\r\n      twoPlusTwo: whatIsTwoPlusTwo,\r\n      submitted: true,\r\n    };\r\n    if (validForm(newFormData, updateErrorMessages)) {\r\n      updateFormData(newFormData);\r\n    }\r\n  };\r\n\r\n  const updateField = (fieldName: string, newValue: string) => {\r\n    let newFormData: FormData = { ...formData };\r\n    newFormData[fieldName] = newValue;\r\n    updateFormData(newFormData);\r\n  };\r\n\r\n  return (\r\n    <section className=\"w12MForm\">\r\n      <W12MHeader />\r\n      <form onSubmit={saveApplication}>\r\n        <table>\r\n          <tbody>\r\n            <TableRowInput\r\n              id=\"speciesName\"\r\n              labelText=\"Species Name\"\r\n              value={formData.speciesName}\r\n              onChangeHandler={(event) =>\r\n                updateField(\"speciesName\", event.target.value)\r\n              }\r\n            />\r\n            {errorMessages.speciesError.length > 0 && (\r\n              <TableRowErrorMessage errorMessage={errorMessages.speciesError} />\r\n            )}\r\n            <TableRowInput\r\n              id=\"planetName\"\r\n              labelText=\"Planet Name\"\r\n              value={formData.planetName}\r\n              onChangeHandler={(event) =>\r\n                updateField(\"planetName\", event.target.value)\r\n              }\r\n            />\r\n            {errorMessages.planetError.length > 0 && (\r\n              <TableRowErrorMessage errorMessage={errorMessages.planetError} />\r\n            )}\r\n            <TableRowInput\r\n              id=\"numberOfBeings\"\r\n              labelText=\"Number of beings\"\r\n              value={formData.numberOfBeings}\r\n              onChangeHandler={(event) =>\r\n                updateField(\"numberOfBeings\", event.target.value)\r\n              }\r\n            />\r\n            {errorMessages.beingsError.length > 0 && (\r\n              <TableRowErrorMessage errorMessage={errorMessages.beingsError} />\r\n            )}\r\n            <TableRowSelect\r\n              id=\"twoPlusTwo\"\r\n              labelText=\"What is 2 + 2?\"\r\n              values={twoPlusTwoOptions}\r\n              onChangeHandler={(event) =>\r\n                setWhatIsTwoPlusTwo(\r\n                  twoPlusTwoOptions[parseInt(event.target.value)]\r\n                )\r\n              }\r\n            />\r\n            {errorMessages.twoPlusTwoError.length > 0 && (\r\n              <TableRowErrorMessage\r\n                errorMessage={errorMessages.twoPlusTwoError}\r\n              />\r\n            )}\r\n            <TableRowTextArea\r\n              id=\"reasonForSparing\"\r\n              labelText=\"Reason for sparing\"\r\n              value={formData.reasonForSparing}\r\n              onChangeHandler={(event) =>\r\n                updateField(\"reasonForSparing\", event.target.value)\r\n              }\r\n            />\r\n            {errorMessages.reasonError.length > 0 && (\r\n              <TableRowErrorMessage errorMessage={errorMessages.reasonError} />\r\n            )}\r\n            <TableRowSubmitButton labelText=\"Submit\" />\r\n          </tbody>\r\n        </table>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default W12MForm;\r\n","import { useFormData } from \"../../ContextProviders/FormDataContext\";\r\n\r\nconst EnteredData: React.FC = () => {\r\n  const formData = useFormData();\r\n  return (\r\n    <>\r\n      <h2>Data submitted on form:</h2>\r\n      <div>\r\n        <div>Species name is: {formData.speciesName}</div>\r\n        <div>Planet name is: {formData.planetName}</div>\r\n        <div>Number of beings is: {formData.numberOfBeings}</div>\r\n        <div>2 + 2 is: {formData.twoPlusTwo}</div>\r\n        <div>Reason for sparing is: {formData.reasonForSparing}</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EnteredData;\r\n","import W12MForm from \"../W12MForm/W12MForm\";\r\nimport EnteredData from \"../EnteredData/EnteredData\";\r\nimport { useFormData } from \"../../ContextProviders/FormDataContext\";\r\n\r\nconst FormLayout = () => {\r\n  const formData = useFormData();\r\n  return (\r\n    <>\r\n      <h1>W-12-M :- APPLICATION TO SPARE PLANET FROM DESTRUCTION</h1>\r\n      <W12MForm />\r\n      {formData.submitted && <EnteredData />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormLayout;\r\n","import ErrorMessageProvider from \"../../ContextProviders/ErrorMessageContext\";\r\nimport FormDataProvider from \"../../ContextProviders/FormDataContext\";\r\nimport FormLayout from \"../FormLayout/FormLayout\";\r\n\r\nconst Layout = () => {\r\n  return (\r\n    <>\r\n      <ErrorMessageProvider>\r\n        <FormDataProvider>\r\n          <FormLayout />\r\n        </FormDataProvider>\r\n      </ErrorMessageProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import \"./App.css\";\r\nimport Layout from \"./components/Layout/Layout\";\r\n\r\nfunction App() {\r\n  return <Layout />;\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\r\n\t\timport('web-vitals').then(\r\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n\t\t\t\tgetCLS(onPerfEntry);\r\n\t\t\t\tgetFID(onPerfEntry);\r\n\t\t\t\tgetFCP(onPerfEntry);\r\n\t\t\t\tgetLCP(onPerfEntry);\r\n\t\t\t\tgetTTFB(onPerfEntry);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}